// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitManage.Domain;

namespace RecruitManage.Domain.Migrations
{
    [DbContext(typeof(RecruitManageContext))]
    [Migration("20190613165657_feedbacktable")]
    partial class feedbacktable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecruitManage.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateName");

                    b.Property<string>("CurrentCompanyName");

                    b.Property<bool>("InNoticePeriod");

                    b.Property<DateTime>("LastWorkingDay");

                    b.Property<int>("NoticePeriodInDays");

                    b.Property<decimal>("YearsOfExperience");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.CandidateTechnologyMapping", b =>
                {
                    b.Property<int>("CandidateTechnologyMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanditateId");

                    b.Property<int>("TechnologyId");

                    b.HasKey("CandidateTechnologyMappingId");

                    b.HasIndex("CanditateId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CandidateTechnologyMappings");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.InterviewFeedback", b =>
                {
                    b.Property<int>("InterviewFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Feedback");

                    b.Property<bool>("FeedbackSentToCandidate");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("ScheduleId");

                    b.HasKey("InterviewFeedbackId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("InterviewFeedbacks");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.InterviewSchedule", b =>
                {
                    b.Property<int>("InterviewScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<bool>("IsFeedbackRecieved");

                    b.Property<int>("Round");

                    b.Property<string>("ScheduleName");

                    b.Property<DateTime>("ScheduledDateTime");

                    b.Property<bool>("SentMailToCandidate");

                    b.Property<bool>("SentMailToInterviewer");

                    b.Property<int>("UserId");

                    b.HasKey("InterviewScheduleId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("InterviewSchedule");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionName");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.RolePermissionMapping", b =>
                {
                    b.Property<int>("RolePermissionMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("RolePermissionMappingId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionMapping");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName");

                    b.HasKey("RolesId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.Technologies", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("TechnologyName");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthToken");

                    b.Property<string>("Email");

                    b.Property<bool>("IsEmailActivated");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.UserDetails", b =>
                {
                    b.Property<int>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<int>("UserId");

                    b.HasKey("UserDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.UserTechnologyMapping", b =>
                {
                    b.Property<int>("UserTechnologyMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TechnologyId");

                    b.Property<int>("userId");

                    b.HasKey("UserTechnologyMappingId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("userId");

                    b.ToTable("UserTechnologyMapping");
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.CandidateTechnologyMapping", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CanditateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecruitManage.Domain.Entities.Technologies", "Technologies")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.InterviewFeedback", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.InterviewSchedule", "InterviewSchedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.InterviewSchedule", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecruitManage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.RolePermissionMapping", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.Permissions", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecruitManage.Domain.Entities.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.UserDetails", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecruitManage.Domain.Entities.UserTechnologyMapping", b =>
                {
                    b.HasOne("RecruitManage.Domain.Entities.Technologies", "Technologies")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecruitManage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
